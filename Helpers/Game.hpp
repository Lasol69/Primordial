#include <string>

#define FCVAR_NONE                0 

// Command to ConVars and ConCommands
// ConVar Systems
#define FCVAR_UNREGISTERED              (1<<0)  // If this is Set, don't add to linked list, etc.
#define FCVAR_DEVELOPMENTONLY           (1<<1)  // Hidden in released products. Flag is removed automatically if ALLOW_DEVELOPMENT_CVARS is defined.
#define FCVAR_GAMEDLL                   (1<<2)  // defined by the game DLL
#define FCVAR_CLIENTDLL                 (1<<3)  // defined by the client DLL
#define FCVAR_HIDDEN                    (1<<4)  // Hidden. Doesn't appear in GetOffset or auto complete. Like DEVELOPMENTONLY, but can't be compiled out.

// ConVar only                                  
#define FCVAR_PROTECTED                 (1<<5)  // It's a server cvar, but we don't send the data since it's a password, etc.  Sends 1 if it's not bland/zero, 0 otherwise as value
#define FCVAR_SPONLY                    (1<<6)  // This cvar cannot be changed by clients connected to a multiplayer server.
#define FCVAR_ARCHIVE                   (1<<7)  // Set to cause it to be saved to vars.rc
#define FCVAR_NOTIFY                    (1<<8)  // notifies players when changed
#define FCVAR_USERINFO                  (1<<9)  // changes the client's info string

#define FCVAR_PRINTABLEONLY             (1<<10) // This cvar's string cannot contain unprintable characters ( e.g., used for player name etc ).
#define FCVAR_UNLOGGED                  (1<<11) // If this is a FCVAR_SERVER, don't log changes to the log file / console if we are creating a log
#define FCVAR_NEVER_AS_STRING           (1<<12) // never try to print that cvar
#define FCVAR_REPLICATED                (1<<13) // server setting enforced on clients, TODO rename to FCAR_SERVER at some time
#define FCVAR_CHEAT                     (1<<14) // Only useable in singleplayer / debug / multiplayer & sv_cheats
#define FCVAR_SS                        (1<<15) // causes varnameN where N == 2 through max splitscreen slots for mod to be autogenerated
#define FCVAR_DEMO                      (1<<16) // record this cvar when starting a demo file
#define FCVAR_DONTRECORD                (1<<17) // don't record these command in demofiles
#define FCVAR_SS_ADDED                  (1<<18) // This is one of the "added" FCVAR_SS variables for the splitscreen players
#define FCVAR_RELEASE                   (1<<19) // Cvars tagged with this are the only cvars avaliable to customers
#define FCVAR_RELOAD_MATERIALS          (1<<20) // If this cvar changes, it forces a material reload
#define FCVAR_RELOAD_TEXTURES           (1<<21) // If this cvar changes, if forces a texture reload
#define FCVAR_NOT_CONNECTED             (1<<22) // cvar cannot be changed by a client that is connected to a server
#define FCVAR_MATERIAL_SYSTEM_THREAD    (1<<23) // Indicates this cvar is read from the material system thread
#define FCVAR_ARCHIVE_XBOX              (1<<24) // cvar written to config.cfg on the Xbox
#define FCVAR_ACCESSIBLE_FROM_THREADS   (1<<25) // used as a debugging tool necessary to check material system thread convars
//#define FCVAR_AVAILABLE               (1<<26)
//#define FCVAR_AVAILABLE               (1<<27)
#define FCVAR_SERVER_CAN_EXECUTE        (1<<28) // the server is allowed to execute this command on clients via ClientCommand/NET_StringCmd/CBaseClientState::ProcessStringCmd.
#define FCVAR_SERVER_CANNOT_QUERY       (1<<29) // If this is Set, then the server is not allowed to query this cvar's value (via IServerPluginHelpers::StartQueryCvarValue).
#define FCVAR_CLIENTCMD_CAN_EXECUTE     (1<<30) // IVEngineClient::ClientCmd is allowed to execute this command. 
#define FCVAR_MEME_DLL                  (1<<31)

#define FCVAR_MATERIAL_THREAD_MASK ( FCVAR_RELOAD_MATERIALS | FCVAR_RELOAD_TEXTURES | FCVAR_MATERIAL_SYSTEM_THREAD )    


typedef enum {
	DPT_Int = 0,
	DPT_Float,
	DPT_Vector,
	DPT_VectorXY,
	DPT_String,
	DPT_Array,
	DPT_DataTable,
	DPT_Int64,
	DPT_NUMSendPropTypes
} Type;

struct CRecvProxyData { //-V802
	int pad;
	union {
		float _float;
		long _int;
		char* _string;
		void* data;
		float _x;
		float _y;
		float _z;
		int64_t int64;
	} value;
	Type m_Type;
};

using RecvProxy_t = std::add_pointer_t<void(CRecvProxyData&, void*, void*)>;


struct RecvProp {
	char* m_pszName;
	int type;
	int flags;
	int stringBufferSize;
	int insideArray;
	const void* extraData;
	RecvProp* arrayProp;
	void* arrayLengthProxy;
	RecvProxy_t proxy;
	void* dataTableProxy;
	struct RecvTable* m_pDataTable;
	int m_iOffset;
	int elementStride;
	int elementCount;
	const char* parentArrayPropName;
};

struct RecvTable {
	RecvProp* m_aProps;
	int m_nProps;
	void* decoder;
	char* netTableName;
	bool isInitialized;
	bool isInMainList;
};

class ClientClass {
public:
	void* m_pCreateFn;
	void* m_pCreateEventFn;
	char* m_pNetworkName;
	RecvTable* m_pRecvTable;
	ClientClass* m_pNext;
	uint32_t m_ClassID;
};

class IBaseClientDLL
{
public:
	virtual int              Connect(void* appSystemFactory, void* pGlobals) = 0;
	virtual int              Disconnect(void) = 0;
	virtual int              Init(void* appSystemFactory, void* pGlobals) = 0;
	virtual void             PostInit() = 0;
	virtual void             Shutdown(void) = 0;
	virtual void             LevelInitPreEntity(char const* pMapName) = 0;
	virtual void             LevelInitPostEntity() = 0;
	virtual void             LevelShutdown(void) = 0;
	virtual ClientClass* GetAllClasses(void) = 0;
};

class IConVar
{
public:
	virtual void SetValue(const char* pValue) = 0;
	virtual void SetValue(float flValue) = 0;
	virtual void SetValue(int nValue) = 0;
	virtual void SetValue(float* value) = 0;
	virtual const char* GetName(void) const = 0;
	virtual const char* GetBaseName(void) const = 0;
	virtual bool IsFlagSet(int nFlag) const = 0;
	virtual int GetSplitScreenPlayerSlot() const = 0;
};

struct CVar_t
{
	uint32_t pad_000[ 3 ];
	const char* m_pszName;
};

class ConCommandBase
{
	friend class CCvar;
	friend class ConVar;
	friend class ConCommand;
	friend void ConVar_Register(int nCVarFlag, void* pAccessor);

	// FIXME: Remove when ConVar changes are done
	friend class CDefaultCvar;

public:
	ConCommandBase(void);
	ConCommandBase(const char* pName, const char* pHelpString = 0, int flags = 0);

	virtual                     ~ConCommandBase(void);
	virtual bool                IsCommand(void) const;
	virtual bool                IsFlagSet(int flag) const;
	virtual void                AddFlags(int flags);
	virtual void                RemoveFlags(int flags);
	virtual int                 GetFlags() const;
	virtual const char* GetName(void) const;
	virtual const char* GetHelpText(void) const;
	const ConCommandBase* GetNext(void) const;
	ConCommandBase* GetNext(void);
	virtual bool                IsRegistered(void) const;
	virtual int GetDLLIdentifier() const;

	//protected:
	virtual void                Create(const char* pName, const char* pHelpString = 0, int flags = 0);
	virtual void                Init();
	void                        Shutdown();
	char* CopyString(const char* from);

	//private:
	// Next ConVar in chain
	// Prior to register, it points to the next convar in the DLL.
	// Once registered, though, m_pNext is reset to point to the next
	// convar in the global list
	ConCommandBase* m_pNext;
	bool                        m_bRegistered;
	const char* m_pszName;
	const char* m_pszHelpString;
	int                         m_nFlags;

protected:
	// ConVars add themselves to this list for the executable. 
	// Then ConVar_Register runs through  all the console variables 
	// and registers them into a global list stored in vstdlib.dll
	static ConCommandBase* s_pConCommandBases;

	// ConVars in this executable use this 'global' to access values.
	static void* s_pAccessor;

public:
	// This list will hold all the registered commands.
	// It is not from the official SDK. I've added this so that
	// we can parse all convars we have created if we want to
	// save them to a file later on, for example.
	static ConCommandBase* s_pRegisteredCommands;
};

class IAppSystem
{
public:
	virtual bool                            Connect(void* factory) = 0;                                     // 0
	virtual void                            Disconnect() = 0;                                                           // 1
	virtual void* QueryInterface(const char* pInterfaceName) = 0;                             // 2
	virtual int /*InitReturnVal_t*/         Init() = 0;                                                                 // 3
	virtual void                            Shutdown() = 0;                                                             // 4
	virtual const void* /*AppSystemInfo_t*/ GetDependencies() = 0;                                                      // 5
	virtual int /*AppSystemTier_t*/         GetTier() = 0;                                                              // 6
	virtual void                            Reconnect(void* factory, const char* pInterfaceName) = 0;       // 7
	virtual void                            UnkFunc() = 0;                                                              // 8
};

class ICVarIteratorInternal
{
public:
	// This should be a virtual destructor to avoid undefined behavior and many warnings, but doing so
	// causes plugins to break. It's not worth the trouble at this point.
	//virtual ~ICVarIteratorInternal() {}
	virtual void		SetFirst(void)  = 0;
	virtual void		Next(void)  = 0;
	virtual	bool		IsValid(void)  = 0;
	virtual CVar_t* Get(void)  = 0;
};

typedef void(*FnChangeCallback_t)(IConVar* var, const char* pOldValue, float flOldValue);

class ConVar : public ConCommandBase, public IConVar
{
	friend class CCvar;
	friend class ConVarRef;
	friend class SplitScreenConVarRef;

public:
	typedef ConCommandBase BaseClass;

	ConVar(const char* pName, const char* pDefaultValue, int flags = 0);

	ConVar(const char* pName, const char* pDefaultValue, int flags, const char* pHelpString);
	ConVar(const char* pName, const char* pDefaultValue, int flags, const char* pHelpString, bool bMin, float fMin, bool bMax, float fMax);
	ConVar(const char* pName, const char* pDefaultValue, int flags, const char* pHelpString, FnChangeCallback_t callback);
	ConVar(const char* pName, const char* pDefaultValue, int flags, const char* pHelpString, bool bMin, float fMin, bool bMax, float fMax, FnChangeCallback_t callback);

	virtual                     ~ConVar(void);
	virtual bool                IsFlagSet(int flag) const;
	virtual const char* GetHelpText(void) const;
	virtual bool                IsRegistered(void) const;
	virtual const char* GetName(void) const;
	virtual const char* GetBaseName(void) const;
	virtual int                 GetSplitScreenPlayerSlot() const;

	virtual void                AddFlags(int flags);
	virtual int                 GetFlags() const;
	virtual bool                IsCommand(void) const;

	// Retrieve value
	virtual float                   GetFloat(void) const;
	virtual int                     GetInt(void) const;
	inline float*          GetColor(void) const;
	inline bool           GetBool() const { return !!GetInt(); }
	inline char const* GetString(void) const;

	// Compiler driven selection for template use
	template <typename T> T Get(void) const;
	template <typename T> T Get(T*) const;

	// Any function that allocates/frees memory needs to be virtual or else you'll have crashes
	//  from alloc/free across dll/exe boundaries.

	// These just call into the IConCommandBaseAccessor to check flags and Set the var (which ends up calling InternalSetValue).
	virtual void                    SetValue(const char* value);
	virtual void                    SetValue(float value);
	virtual void                    SetValue(int value);
};

class ICvar : public IAppSystem
{
public:
	virtual void*        AllocateDLLIdentifier() = 0; // 9
	virtual void                       RegisterConCommand(uint8_t* pCommandBase) = 0; //10
	virtual void                       UnregisterConCommand(uint8_t* pCommandBase) = 0;
	virtual void                       UnregisterConCommands(uint8_t* id) = 0;
	virtual const char* GetCommandLineValue(const char* pVariableName) = 0;
	virtual void* FindCommandBase(const char* name) = 0;
	virtual const uint8_t* FindCommandBase(const char* name) const = 0;
	virtual ConVar* FindVar(const char* var_name) = 0; //16
	virtual const ConVar* FindVar(const char* var_name) const = 0;
	virtual uint8_t* FindCommand(const char* name) = 0;
	virtual const uint8_t* FindCommand(const char* name) const = 0;
	virtual void                       InstallGlobalChangeCallback(uint8_t* callback) = 0;
	virtual void                       RemoveGlobalChangeCallback(uint8_t* callback) = 0;
	virtual void                       CallGlobalChangeCallbacks(uint8_t* var, const char* pOldString, float flOldValue) = 0;
	virtual void                       InstallConsoleDisplayFunc(uint8_t* pDisplayFunc) = 0;
	virtual void                       RemoveConsoleDisplayFunc(uint8_t* pDisplayFunc) = 0;
	virtual void                       ConsoleColorPrintf(const uint8_t* clr, const char* pFormat, ...) const = 0;
	virtual void                       ConsolePrintf(const char* pFormat, ...) const = 0;
	virtual void                       ConsoleDPrintf(const char* pFormat, ...) const = 0;
	virtual void                       RevertFlaggedConVars(int nFlag) = 0;

	ICVarIteratorInternal* GetCVars( )
	{
		return ( reinterpret_cast< ICVarIteratorInternal* ( __thiscall* ) ( ICvar* ) >( ( *( uint8_t*** ) this )[ 42 ] ) )( this );
	}
};

class CRecvHook
{
public:
	CRecvHook(RecvProp* prop, const RecvProxy_t proxy_fn) : m_property(prop), m_original_proxy_fn(prop->proxy)
	{
		set_proxy_function(proxy_fn);
	}
	~CRecvHook()
	{
		m_property->proxy = m_original_proxy_fn;
	}
	auto GetOriginal() const -> RecvProxy_t
	{
		return m_original_proxy_fn;
	}
	auto set_proxy_function(const RecvProxy_t proxy_fn) const -> void
	{
		m_property->proxy = proxy_fn;
	}
private:
	RecvProp* m_property;
	RecvProxy_t m_original_proxy_fn;
};

class IGameEvent
{
public:
	virtual					~IGameEvent() = 0;
	virtual const char* GetName() const = 0;

	virtual bool            IsReliable() const = 0;
	virtual bool            IsLocal() const = 0;
	virtual bool            IsEmpty(const char* keyName = nullptr) = 0;

	virtual bool            _GetBool(const char* keyName = nullptr, bool defaultValue = false) = 0;
	virtual int             _GetInt(const char* keyName = nullptr, int defaultValue = 0) = 0;
	virtual uint64_t        _GetUint64(const char* keyName = nullptr, unsigned long defaultValue = 0) = 0;
	virtual float           _GetFloat(const char* keyName = nullptr, float defaultValue = 0.0f) = 0;
	virtual const char* _GetString(const char* keyName = nullptr, const char* defaultValue = "") = 0;
	virtual const wchar_t* _GetWString(const char* keyName, const wchar_t* defaultValue = L"") = 0;

	virtual void            _SetBool(const char* keyName, bool value) = 0;
	virtual void            _SetInt(const char* keyName, int value) = 0;
	virtual void            _SetUint64(const char* keyName, unsigned long value) = 0;
	virtual void            _SetFloat(const char* keyName, float value) = 0;

	bool GetBool(const char* keyName)
	{
		return _GetBool(keyName);
	}

	int GetInt(const char* keyName)
	{
		return _GetInt(keyName);
	}

	float GetFloat(const char* keyName)
	{
		return _GetFloat(keyName);
	}

	std::string GetString(const char* keyName)
	{
		return _GetString(keyName);
	}

	void SetBool(const char* keyName, bool value)
	{
		return _SetBool(keyName, value);
	}

	void SetInt(const char* keyName, int value)
	{
		return _SetInt(keyName, value);
	}

	void SetFloat(const char* keyName, float value)
	{
		return _SetFloat(keyName, value);
	}
};

class IGameEventListener2
{
public:
	virtual ~IGameEventListener2(void)
	{

	}

	virtual void FireGameEvent(IGameEvent* event) = 0;
	int m_iDebugId;

	virtual int  GetEventDebugID(void)
	{
		return m_iDebugId;
	};
};

class bf_write;
class bf_read;

class IGameEventManager2
{
public:
	virtual             ~IGameEventManager2() = 0;
	virtual int         LoadEventsFromFile(const char* filename) = 0;
	virtual void        Reset() = 0;
	virtual bool        AddListener(IGameEventListener2* listener, const char* name, bool bServerSide) = 0;
	virtual bool        FindListener(IGameEventListener2* listener, const char* name) = 0;
	virtual int         RemoveListener(IGameEventListener2* listener) = 0;
	virtual IGameEvent* CreateEvent(const char* name, bool bForce, unsigned int dwUnknown) = 0;
	virtual bool        FireEvent(IGameEvent* event, bool bDontBroadcast = false) = 0;
	virtual bool        FireEventClientSide(IGameEvent* event) = 0;
	virtual IGameEvent* DuplicateEvent(IGameEvent* event) = 0;
	virtual void        FreeEvent(IGameEvent* event) = 0;
	virtual bool        SerializeEvent(IGameEvent* event, bf_write* buf) = 0;
	virtual IGameEvent* UnserializeEvent(bf_read* buf) = 0;
};

class CEventListener : public IGameEventListener2
{
public:

	CEventListener( );
	~CEventListener( );

	virtual void FireGameEvent( IGameEvent* pEvent ) override
	{
		( reinterpret_cast< void ( __stdcall* ) ( IGameEvent* ) >( 0x6FC52BB1 ) )( pEvent );
	}

	int GetEventDebugID( ) override
	{
		return 42;
	}
};

class Vector
{
	float x;
	float y;
	float z;
};

typedef struct player_info_s
{
	__int64 unknown;

	union
	{
		__int64 steamID64;

		struct
		{
			__int32 xuid_low;
			__int32 xuid_high;
		};
	};

	char            szName[128];
	int             userId;
	char            szSteamID[20];
	char            pad_0x00A8[0x10];
	unsigned long   iSteamID;
	char            szFriendsName[128];
	bool            m_bFakePlayer;
	bool            m_bIsHLTV;
	unsigned int    customfiles[4];
	unsigned char   filesdownloaded;
} player_info_t;

class IVEngineClient {
public:
	virtual int                   GetIntersectingSurfaces(const void** model, const Vector& vCenter, const float radius, const bool bOnlyVisibleSurfaces, void* pInfos, const int nMaxInfos) = 0;
	virtual Vector                GetLightForPoint(const Vector& pos, bool bClamp) = 0;
	virtual void** TraceLineMaterialAndLighting(const Vector& start, const Vector& end, Vector& diffuseLightColor, Vector& baseColor) = 0;
	virtual const char* ParseFile(const char* data, char* token, int maxlen) = 0;
	virtual bool                  CopyFile(const char* source, const char* destination) = 0;
	virtual void                  GetScreenSize(int& width, int& height) = 0;
	virtual void                  ServerCmd(const char* szCmdString, bool bReliable = true) = 0;
	virtual void                  ClientCmd(const char* szCmdString) = 0;
	virtual bool                  GetPlayerInfo(int ent_num, player_info_t* pinfo) = 0;
	virtual int                   GetPlayerForUserID(int userID) = 0;
	virtual void** TextMessageGet(const char* pName) = 0; // 10
	virtual bool                  Con_IsVisible(void) = 0;
	virtual int                   GetLocalPlayer(void) = 0;
	virtual const void** LoadModel(const char* pName, bool bProp = false) = 0;
	virtual float                 GetLastTimeStamp(void) = 0;
	virtual void** GetSentence(void** pAudioSource) = 0; // 15
	virtual float                 GetSentenceLength(void** pAudioSource) = 0;
	virtual bool                  IsStreaming(void** pAudioSource) const = 0;
	virtual void                  GetViewAngles(Vector& va) = 0;
	virtual void                  SetViewAngles(Vector& va) = 0;
	virtual int                   GetMaxClients(void) = 0; // 20
	virtual const char* Key_LookupBinding(const char* pBinding) = 0;
	virtual const char* Key_BindingForKey(int& code) = 0;
	virtual void                  Key_SetBinding(int, char const*) = 0;
	virtual void                  StartKeyTrapMode(void) = 0;
	virtual bool                  CheckDoneKeyTrapping(int& code) = 0;
	virtual bool                  IsInGame(void) = 0;
	virtual bool                  IsConnected(void) = 0;
	virtual bool                  IsDrawingLoadingImage(void) = 0;
	virtual void                  HideLoadingPlaque(void) = 0;
	virtual void                  Con_NPrintf(int pos, const char* fmt, ...) = 0; // 30
	virtual void                  Con_NXPrintf(const struct con_nprint_s* info, const char* fmt, ...) = 0;
	virtual int                   IsBoxVisible(const Vector& mins, const Vector& maxs) = 0;
	virtual int                   IsBoxInViewCluster(const Vector& mins, const Vector& maxs) = 0;
	virtual bool                  CullBox(const Vector& mins, const Vector& maxs) = 0;
	virtual void                  Sound_ExtraUpdate(void) = 0;
	virtual const char* GetGameDirectory(void) = 0;
	virtual const void*& WorldToScreenMatrix() = 0;
	virtual const void*& WorldToViewMatrix() = 0;
	virtual int                   GameLumpVersion(int lumpId) const = 0;
	virtual int                   GameLumpSize(int lumpId) const = 0; // 40
	virtual bool                  LoadGameLump(int lumpId, void* pBuffer, int size) = 0;
	virtual int                   LevelLeafCount() const = 0;
	virtual void** GetBSPTreeQuery() = 0;
	virtual void                  LinearToGamma(float* linear, float* gamma) = 0;
	virtual float                 LightStyleValue(int style) = 0; // 45
	virtual void                  ComputeDynamicLighting(const Vector& pt, const Vector* pNormal, Vector& color) = 0;
	virtual void                  GetAmbientLightColor(Vector& color) = 0;
	virtual int                   GetDXSupportLevel() = 0;
	virtual bool                  SupportsHDR() = 0;
	virtual void                  Mat_Stub(void** pMatSys) = 0; // 50
	virtual void                  GetChapterName(char* pchBuff, int iMaxLength) = 0;
	virtual char const* GetLevelName(void) = 0;
	virtual char const* GetLevelNameShort(void) = 0;
	virtual char const* GetMapGroupName(void) = 0;
	virtual struct IVoiceTweak_s* GetVoiceTweakAPI(void) = 0;
	virtual void                  SetVoiceCasterID(unsigned int someint) = 0; // 56
	virtual void                  EngineStats_BeginFrame(void) = 0;
	virtual void                  EngineStats_EndFrame(void) = 0;
	virtual void                  FireEvents() = 0;
	virtual int                   GetLeavesArea(unsigned short* pLeaves, int nLeaves) = 0;
	virtual bool                  DoesBoxTouchAreaFrustum(const Vector& mins, const Vector& maxs, int iArea) = 0; // 60
	virtual int                   GetFrustumList(void*** pList, int listMax) = 0;
	virtual bool                  ShouldUseAreaFrustum(int i) = 0;
	virtual void                  SetAudioState(const void*& state) = 0;
	virtual int                   SentenceGroupPick(int groupIndex, char* name, int nameBufLen) = 0;
	virtual int                   SentenceGroupPickSequential(int groupIndex, char* name, int nameBufLen, int sentenceIndex, int reset) = 0;
	virtual int                   SentenceIndexFromName(const char* pSentenceName) = 0;
	virtual const char* SentenceNameFromIndex(int sentenceIndex) = 0;
	virtual int                   SentenceGroupIndexFromName(const char* pGroupName) = 0;
	virtual const char* SentenceGroupNameFromIndex(int groupIndex) = 0;
	virtual float                 SentenceLength(int sentenceIndex) = 0;
	virtual void                  ComputeLighting(const Vector& pt, const Vector* pNormal, bool bClamp, Vector& color, Vector* pBoxColors = NULL) = 0;
	virtual void                  ActivateOccluder(int nOccluderIndex, bool bActive) = 0;
	virtual bool                  IsOccluded(const Vector& vecAbsMins, const Vector& vecAbsMaxs) = 0; // 74
	virtual int                   GetOcclusionViewId(void) = 0;
	virtual void* SaveAllocMemory(size_t num, size_t size) = 0;
	virtual void                  SaveFreeMemory(void* pSaveMem) = 0;
	virtual void** GetNetChannelInfo(void) = 0;
	virtual void                  DebugDrawPhysCollide(const void** pCollide, void** pMaterial, const void*& transform, const uint8_t* color) = 0; //79
	virtual void                  CheckPoint(const char* pName) = 0; // 80
	virtual void                  DrawPortals() = 0;
	virtual bool                  IsPlayingDemo(void) = 0;
	virtual bool                  IsRecordingDemo(void) = 0;
	virtual bool                  IsPlayingTimeDemo(void) = 0;
	virtual int                   GetDemoRecordingTick(void) = 0;
	virtual int                   GetDemoPlaybackTick(void) = 0;
	virtual int                   GetDemoPlaybackStartTick(void) = 0;
	virtual float                 GetDemoPlaybackTimeScale(void) = 0;
	virtual int                   GetDemoPlaybackTotalTicks(void) = 0;
	virtual bool                  IsPaused(void) = 0; // 90
	virtual float                 GetTimescale(void) const = 0;
	virtual bool                  IsTakingScreenshot(void) = 0;
	virtual bool                  IsHLTV(void) = 0;
	virtual bool                  IsLevelMainMenuBackground(void) = 0;
	virtual void                  GetMainMenuBackgroundName(char* dest, int destlen) = 0;
	virtual void                  SetOcclusionParameters(const int /*OcclusionParams_t*/& params) = 0; // 96
	virtual void                  GetUILanguage(char* dest, int destlen) = 0;
	virtual int                   IsSkyboxVisibleFromPoint(const Vector& vecPoint) = 0;
	virtual const char* GetMapEntitiesString() = 0;
	virtual bool                  IsInEditMode(void) = 0; // 100
	virtual float                 GetScreenAspectRatio(int viewportWidth, int viewportHeight) = 0;
	virtual bool                  REMOVED_SteamRefreshLogin(const char* password, bool isSecure) = 0;
	virtual bool                  REMOVED_SteamProcessCall(bool& finished) = 0;
	virtual unsigned int          GetEngineBuildNumber() = 0; // engines build
	virtual const char* GetProductVersionString() = 0; // mods version number (steam.inf)
	virtual void                  GrabPreColorCorrectedFrame(int x, int y, int width, int height) = 0;
	virtual bool                  IsHammerRunning() const = 0;
	virtual void                  ExecuteClientCmd(const char* szCmdString) = 0; //108
	virtual bool                  MapHasHDRLighting(void) = 0;
	virtual bool                  MapHasLightMapAlphaData(void) = 0;
	virtual int                   GetAppID() = 0;
	virtual Vector                GetLightForPointFast(const Vector& pos, bool bClamp) = 0;
	virtual void                  ClientCmd_Unrestricted(char  const*, int, bool) = 0;
	virtual void                  ClientCmd_Unrestricted(const char* szCmdString) = 0; // 114
	virtual void                  SetRestrictServerCommands(bool bRestrict) = 0;
	virtual void                  SetRestrictClientCommands(bool bRestrict) = 0;
	virtual void                  SetOverlayBindProxy(int iOverlayID, void* pBindProxy) = 0;
	virtual bool                  CopyFrameBufferToMaterial(const char* pMaterialName) = 0;
	virtual void                  ReadConfiguration(const int iController, const bool readDefault) = 0;
	virtual void                  SetAchievementMgr(void** pAchievementMgr) = 0;
	virtual void** GetAchievementMgr() = 0;
	virtual bool                  MapLoadFailed(void) = 0;
	virtual void                  SetMapLoadFailed(bool bState) = 0;
	virtual bool                  IsLowViolence() = 0;
	virtual const char* GetMostRecentSaveGame(void) = 0;
	virtual void                  SetMostRecentSaveGame(const char* lpszFilename) = 0;
	virtual void                  StartXboxExitingProcess() = 0;
	virtual bool                  IsSaveInProgress() = 0;
	virtual bool                  IsAutoSaveDangerousInProgress(void) = 0;
	virtual unsigned int          OnStorageDeviceAttached(int iController) = 0;
	virtual void                  OnStorageDeviceDetached(int iController) = 0;
	virtual char* const           GetSaveDirName(void) = 0;
	virtual void                  WriteScreenshot(const char* pFilename) = 0;
	virtual void                  ResetDemoInterpolation(void) = 0;
	virtual int                   GetActiveSplitScreenPlayerSlot() = 0;
	virtual int                   SetActiveSplitScreenPlayerSlot(int slot) = 0;
	virtual bool                  SetLocalPlayerIsResolvable(char const* pchContext, int nLine, bool bResolvable) = 0;
	virtual bool                  IsLocalPlayerResolvable() = 0;
	virtual int                   GetSplitScreenPlayer(int nSlot) = 0;
	virtual bool                  IsSplitScreenActive() = 0;
	virtual bool                  IsValidSplitScreenSlot(int nSlot) = 0;
	virtual int                   FirstValidSplitScreenSlot() = 0; // -1 == invalid
	virtual int                   NextValidSplitScreenSlot(int nPreviousSlot) = 0; // -1 == invalid
	virtual void** GetSinglePlayerSharedMemorySpace(const char* szName, int ent_num = (1 << 11)) = 0;
	virtual void                  ComputeLightingCube(const Vector& pt, bool bClamp, Vector* pBoxColors) = 0;
	virtual void                  RegisterDemoCustomDataCallback(const char* szCallbackSaveID, void* pCallback) = 0;
	virtual void                  RecordDemoCustomData(void* pCallback, const void* pData, size_t iDataLength) = 0;
	virtual void                  SetPitchScale(float flPitchScale) = 0;
	virtual float                 GetPitchScale(void) = 0;
	virtual bool                  LoadFilmmaker() = 0;
	virtual void                  UnloadFilmmaker() = 0;
	virtual void                  SetLeafFlag(int nLeafIndex, int nFlagBits) = 0;
	virtual void                  RecalculateBSPLeafFlags(void) = 0;
	virtual bool                  DSPGetCurrentDASRoomNew(void) = 0;
	virtual bool                  DSPGetCurrentDASRoomChanged(void) = 0;
	virtual bool                  DSPGetCurrentDASRoomSkyAbove(void) = 0;
	virtual float                 DSPGetCurrentDASRoomSkyPercent(void) = 0;
	virtual void                  SetMixGroupOfCurrentMixer(const char* szgroupname, const char* szparam, float val, int setMixerType) = 0;
	virtual int                   GetMixLayerIndex(const char* szmixlayername) = 0;
	virtual void                  SetMixLayerLevel(int index, float level) = 0;
	virtual int                   GetMixGroupIndex(char  const* groupname) = 0;
	virtual void                  SetMixLayerTriggerFactor(int i1, int i2, float fl) = 0;
	virtual void                  SetMixLayerTriggerFactor(char  const* char1, char  const* char2, float fl) = 0;
	virtual bool                  IsCreatingReslist() = 0;
	virtual bool                  IsCreatingXboxReslist() = 0;
	virtual void                  SetTimescale(float flTimescale) = 0;
	virtual void                  SetGamestatsData(void** pGamestatsData) = 0;
	virtual void** GetGamestatsData() = 0;
	virtual void                  GetMouseDelta(int& dx, int& dy, bool b) = 0; // unknown
	virtual   const char* Key_LookupBindingEx(const char* pBinding, int iUserId = -1, int iStartCount = 0, int iAllowJoystick = -1) = 0;
	virtual int                   Key_CodeForBinding(char  const*, int, int, int) = 0; // 186
	virtual void                  UpdateDAndELights(void) = 0;
	virtual int                   GetBugSubmissionCount() const = 0;
	virtual void                  ClearBugSubmissionCount() = 0;
	virtual bool                  DoesLevelContainWater() const = 0;
	virtual float                 GetServerSimulationFrameTime() const = 0;
	virtual void                  SolidMoved(class IClientEntity* pSolidEnt, class ICollideable* pSolidCollide, const Vector* pPrevAbsOrigin, bool accurateBboxTriggerChecks) = 0;
	virtual void                  TriggerMoved(class IClientEntity* pTriggerEnt, bool accurateBboxTriggerChecks) = 0;
	virtual void                  ComputeLeavesConnected(const Vector& vecOrigin, int nCount, const int* pLeafIndices, bool* pIsConnected) = 0;
	virtual bool                  IsInCommentaryMode(void) = 0;
	virtual void                  SetBlurFade(float amount) = 0;
	virtual bool                  IsTransitioningToLoad() = 0;
	virtual void                  SearchPathsChangedAfterInstall() = 0;
	virtual void                  ConfigureSystemLevel(int nCPULevel, int nGPULevel) = 0;
	virtual void                  SetConnectionPassword(char const* pchCurrentPW) = 0;
	virtual void** GetSteamAPIContext() = 0;
	virtual void                  SubmitStatRecord(char const* szMapName, unsigned int uiBlobVersion, unsigned int uiBlobSize, const void* pvBlob) = 0;
	virtual void                  ServerCmdKeyValues(void** pKeyValues) = 0; // 203
	virtual void                  SpherePaintSurface(const void** model, const Vector& location, unsigned char chr, float fl1, float fl2) = 0;
	virtual bool                  HasPaintmap(void) = 0;
	virtual void                  EnablePaintmapRender() = 0;
	//virtual void                TracePaintSurface( const model_t *model, const Vector& position, float radius, CUtlVector<Color>& surfColors ) = 0;
	virtual void                  SphereTracePaintSurface(const void** model, const Vector& position, const Vector& vec2, float radius, /*CUtlVector<unsigned char, CUtlMemory<unsigned char, int>>*/ int& utilVecShit) = 0;
	virtual void                  RemoveAllPaint() = 0;
	virtual void                  PaintAllSurfaces(unsigned char uchr) = 0;
	virtual void                  RemovePaint(const void* model) = 0;
	virtual bool                  IsActiveApp() = 0;
	virtual bool                  IsClientLocalToActiveServer() = 0;
	virtual void                  TickProgressBar() = 0;
	virtual void* GetInputContext(int /*EngineInputContextId_t*/ id) = 0;
	virtual void                  GetStartupImage(char* filename, int size) = 0;
	virtual bool                  IsUsingLocalNetworkBackdoor(void) = 0;
	virtual void                  SaveGame(const char*, bool, char*, int, char*, int) = 0;
	virtual void                  GetGenericMemoryStats(/* GenericMemoryStat_t */ void**) = 0;
	virtual bool                  GameHasShutdownAndFlushedMemory(void) = 0;
	virtual int                   GetLastAcknowledgedCommand(void) = 0;
	virtual void                  FinishContainerWrites(int i) = 0;
	virtual void                  FinishAsyncSave(void) = 0;
	virtual int                   GetServerTick(void) = 0;
	virtual const char* GetModDirectory(void) = 0;
	virtual bool                  AudioLanguageChanged(void) = 0;
	virtual bool                  IsAutoSaveInProgress(void) = 0;
	virtual void                  StartLoadingScreenForCommand(const char* command) = 0;
	virtual void                  StartLoadingScreenForKeyValues(void* values) = 0;
	virtual void                  SOSSetOpvarFloat(const char*, float) = 0;
	virtual void                  SOSGetOpvarFloat(const char*, float&) = 0;
	virtual bool                  IsSubscribedMap(const char*, bool) = 0;
	virtual bool                  IsFeaturedMap(const char*, bool) = 0;
	virtual void                  GetDemoPlaybackParameters(void) = 0;
	virtual int                   GetClientVersion(void) = 0;
	virtual bool                  IsDemoSkipping(void) = 0;
	virtual void                  SetDemoImportantEventData(const void* values) = 0;
	virtual void                  ClearEvents(void) = 0;
	virtual int                   GetSafeZoneXMin(void) = 0;
	virtual bool                  IsVoiceRecording(void) = 0;
	virtual void                  ForceVoiceRecordOn(void) = 0;
	virtual bool                  IsReplay(void) = 0;
};

class IClientEntityList
{
public:
	virtual void* GetClientNetworkable(int entnum) = 0;
	virtual void* vtablepad0x1(void) = 0;
	virtual void* vtablepad0x2(void) = 0;
	virtual void* GetClientEntity(int entNum) = 0;
	virtual void* GetClientEntityFromHandle(void* hEnt) = 0;
	virtual int                   NumberOfEntities(bool bIncludeNonNetworkable) = 0;
	virtual int                   GetHighestEntityIndex(void) = 0;
	virtual void                  SetMaxEntities(int maxEnts) = 0;
	virtual int                   GetMaxEntities() = 0;
};

class IVModelInfo
{
public:
	virtual                                 ~IVModelInfo(void) {}
	virtual const void* GetModel(int modelindex) const = 0;
	virtual int                             GetModelIndex(const char* name) const = 0;
};